services:
  nginx:
    image: nginx:1.25.3-alpine  # Explicit version for stability
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      server-api:
        condition: service_healthy
    networks:
      - backend

  server-api:
    build: .
    container_name: server-api
    restart: always
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      mysql-master:
        condition: service_healthy
      redis-cluster-1:
        condition: service_started  # Only check if the service starts, no health check
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      - backend
    command: sh -c "sleep 30 && /app/server-api"  # Delay startup for dependent services

  kafka-worker:
    build: .
    container_name: kafka-worker
    restart: always
    env_file:
      - .env
    depends_on:
      mysql-master:
        condition: service_healthy
      redis-cluster-1:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - backend
    command: ["/app/kafka-worker"]

  mysql-master:
    container_name: mysql-master
    image: mysql:5.7  # Specify exact version for consistency
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MYSQL_DATABASE: "red_packet_db"
    command:
      - --bind-address=0.0.0.0
      - --default-authentication-plugin=mysql_native_password
      - --log-bin=mysql-bin  # Enable Binary Logging for replication
      - --server-id=1       # Unique server ID (Master is usually 1)
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    volumes:
      - mysql_master_data:/var/lib/mysql
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  mysql-slave:
    container_name: mysql-slave
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MYSQL_DATABASE: "red_packet_db"
    command:
      - bash
      - -c
      - >
        export MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}";
        echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD";
        env;
        docker-entrypoint.sh --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0 --server-id=2;
    ports:
      - "3307:3306"
    depends_on:
      mysql-master:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - mysql_slave_data:/var/lib/mysql
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis Cluster - Node 1
  redis-cluster-1:
    image: redis:latest
    container_name: redis-cluster-1
    hostname: redis-cluster-1
    ports:
      - "6379:6379"
      - "16379:16379"
    networks:
      - backend
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 15000 --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis Cluster - Node 2
  redis-cluster-2:
    image: redis:latest
    container_name: redis-cluster-2
    hostname: redis-cluster-2
    ports:
      - "6380:6379"
      - "16380:16379"
    networks:
      - backend
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 15000 --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis Cluster - node 3
  redis-cluster-3:
    image: redis:latest
    container_name: redis-cluster-3
    hostname: redis-cluster-3
    ports:
      - "6381:6379"
      - "16381:16379"
    networks:
      - backend
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 15000 --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"  # Open port for external connections in dev
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CREATE_TOPICS=red_packet_transactions:1:1
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  mysql_master_data: # Persistent volume for MySQL Master
  mysql_slave_data:  # Persistent volume for MySQL Slave

networks:
  backend:
    name: backend
    driver: bridge
